<?xml version="1.0"?>
<project name="aeatk" default="deploy">
	
		<property name="private.buildfile" value="build-resources/private/user-antbuild.properties"/>
		<property file="${private.buildfile}"/>
		<property file="build-resources/antbuild.properties"/>
		<property name="fallback.branch" value="development"/>
		
		<touch file="${private.buildfile}" mkdirs="true"/>
		<fail message="${line.separator}================[ ERROR ] ==============${line.separator}
You must specify the software.dir property in the file ${private.buildfile}${line.separator}
If you are running eclipse you should right click on this project and hit refresh,
so that the file appears.${line.separator}
${line.separator}
You should then put the following two lines in the file:${line.separator}
software.dir=[path to place completed packages]${line.separator}
buildnumberpath=[path to store build numbers]${line.separator}
#Windows users should use \\ or / as path seperators.
			
			">
			<condition>
				<not>
						<isset property="software.dir"/>
				</not>
			</condition>
		</fail>
	
	<mkdir dir="${software.dir}"/>
	<mkdir dir="${buildnumberpath}"/>

	<property name="version.file" value="${ant.project.name}-version.txt"/>
	<property name="version.file.dev" value="version/${version.file}"/>

	
	
	<!-- If you don't specify a buildnumber file we will use this -->
	<property name="buildnumberpath" value="build/classes/"/>


	
	<target name="git-status-init" description="Initialize Git variables">
		<echo>If this next call fails, it means you haven't installed git and/or it's not in your PATH</echo>
		<exec executable="git" outputproperty="git.branch">
			<arg value="rev-parse"/>
			<arg value="--abbrev-ref"/>
			<arg value="HEAD"/>
		</exec>
		
		<exec executable="git" outputproperty="git.commit">
					<arg value="rev-parse"/>
					<arg value="HEAD"/>
		</exec>

		<exec executable="git" outputproperty="git.shortcommit">
							<arg value="rev-parse"/>
							<arg value="--short=12"/>
							<arg value="HEAD"/>
				</exec>
	
		<exec executable="git" resultproperty="git.dirty" outputproperty="git.dirty.output">
					<arg value="diff"/>
					<arg value="--exit-code"/>
		</exec>
		<echo>Git properties loaded, branch: ${git.branch}
commit: ${git.commit}
shortcommit: ${git.shortcommit}
dirty: ${git.dirty}</echo>
	</target>
	

	
	
	<target name="init" description="Creates build environment" depends="git-status-init"> 
		<mkdir dir="build/classes/"/>
		<mkdir dir="build/testclasses/"/>
		<mkdir dir="dist"/>
		<mkdir dir="models"/>
		
		<property file="${software.dir}${file.separator}fastrf-${git.branch}.latest"/>
		<property file="${software.dir}${file.separator}fastrf-${fallback.branch}.latest"/>
		
		<fail unless="fastrf.location" message="${line.separator}================[ ERROR ] ==============${line.separator}You must check out and build the fastrf project on this branch (${git.branch}) first${line.separator}Expected to find file:${software.dir}${file.separator}fastrf-${git.branch}.latest${line.separator}This file should contain the location of fastrf."/> 
		
		<path id="compile.classpath">
			<fileset dir="lib" id="lib">
				<include name="*.jar"/>
				<exclude name="*sources.jar"/>
			</fileset>
			<fileset dir="${fastrf.location}/" id="fastrf">
				<include name="*"/>
			</fileset>
		</path>	
		<!--<path id="compile.classpath">
			<fileset dir="lib" id="lib">
				<include name="*.jar"/>
				<exclude name="*sources.jar"/>
			</fileset>
			<fileset dir="${software.dir}/fastrf-${git.branch}/" id="fastrf">
				<include name="*"/>
			</fileset>
		</path>-->	
	</target>
	
	<target name="clean" description="Cleans up build environment">
		<delete dir="build"/>
		<delete dir="dist"/>
		<delete dir="doc"/>
	</target>
	
	<target name="compile" depends="init" description="Compiles the source">
		<javac srcdir="src" destdir="build/classes" debug="true" includeantruntime="false" target="1.7" source="1.7" >
		<classpath refid="compile.classpath"/>
		</javac>
		<delete file="build/classes/ca/ubc/cs/beta/aeatk/ant/execscript/Launcher.class" />
		<javac srcdir="src" destdir="build/classes" includes="ca/ubc/cs/beta/aeatk/ant/execscript/Launcher.java" debug="true" includeantruntime="false" target="1.5" source="1.5" />
		<path id="build.classpath">
			<path refid="compile.classpath"/>
			<path location="build/classes"/>
		</path>
	</target>	
	
	
	<target name="compile-test" depends="compile">
		<path id="test.compile.classpath">
            <fileset dir="lib" id="lib">
                <include name="*.jar"/>
                <exclude name="*sources.jar"/>
            </fileset>
            <fileset dir="${software.dir}/fastrf-${git.branch}/" id="fastrf">
                <include name="fastrf.jar"/>
            </fileset>
                <fileset dir="testlib">
                    <include name="*.jar"/>
                </fileset>
            <pathelement path="build/classes/"/>
        </path>
				
	 	<javac srcdir="test" destdir="build/testclasses" debug="true" verbose="true" target="1.7" source="1.7">
	       <classpath refid="test.compile.classpath" />
		</javac>
	 </target>
	
	<target name="javadoc" depends="setjavaprop,doc, init" description="Make Javadoc"/>
	
	<target name="setjavaprop">
		<property name="build.javadoc" value="true"/>
	</target>
	
	<target name="doc" depends="javadoc-internal,nodoc"/>
	
	<target name="javadoc-internal"  if="build.javadoc">
		<path id="doc.classpath">
			<fileset dir="doclib" id="doclib">
				<include name="*.jar"/>
				<exclude name="*sources.jar"/>
			</fileset>
			<fileset dir="${fastrf.location}" id="fastrf">
                <include name="fastrf.jar"/>
				<include name="fastrf-src.jar"/>
	       </fileset>
			<path refid="compile.classpath"/>
		</path>	
		<javadoc sourcepath="src/" author="true" destdir="doc/" classpathref="doc.classpath" excludepackagenames="ca.ubc.cs.beta.hal.startup,ca.ubc.cs.beta.hal" />
	</target>
	
	<target name="nodoc" unless="build.javadoc">
		<echo>build.javadoc property not set so skipping building of javadoc</echo>
	</target>
	
	
	 <target name="test" depends="compile-test" description="Run JUnit Tests">
	       <path id="test.classpath">
	            <fileset dir="lib" id="lib">
	                <include name="*.jar"/>
	                <exclude name="*sources.jar"/>
	            </fileset>
	       		<fileset dir="testlib">
	       			<include name="*.jar"/>
	       		</fileset>
	            <fileset dir="${software.dir}/fastrf-${git.branch}/" id="fastrf">
	                <include name="fastrf.jar"/>
	            </fileset>
	            <pathelement path="build/classes/" /> 
	            <pathelement path="build/testclasses/" />
	            <pathelement path="test-files/" />
	        </path>
	 		
	        <junit fork="yes" printsummary="true" showoutput="false"> 
				<classpath refid="test.classpath"/>			
	 			<test name="ca.ubc.cs.beta.AEATKTestSuite"/>
	            <formatter type="plain" usefile="false" />
			</junit>
	</target>
		
	<target name="archive" depends="compile,doc" description="Creates JAR Archives">
		<buildnumber file="${buildnumberpath}/buildnumber-${ant.project.name}"/>
		<property name="version.string" value="v${version.major}.${version.minor}.${version.revision}${version.beta}-${git.branch}-${build.number}"/>
		<property name="version.devstring" value="v${version.major}.${version.minor}.${version.revision}dev-${git.branch}-${build.number}"/>
		<echo file="${version.file.dev}">${version.devstring} (${git.shortcommit})</echo>
		<echo file="build/classes/${version.file}">${version.string} (${git.shortcommit})</echo>
		<property name="outputfilename" value="${ant.project.name}-${version.string}"/>
		
		
		<!--<jar destfile="dist/aeatk-v${version.major}_${version.minor}_${build.number}.jar" basedir="build/classes"/>-->
		<jar destfile="dist/aeatk.jar">
			<fileset dir="build/classes">
				<include name="**/*"/>
			</fileset>
			<fileset dir="src/">
				 <include name="**/*.xml"/>
			</fileset>
		</jar>
		
		
		<jar destfile="dist/aeatk-src.jar">
			<fileset dir="src/">
				 <include name="**/*.java"/>
			</fileset>
		</jar>
		<copy todir="dist/" force="true">
			<fileset refid="lib"/>
			<fileset refid="fastrf"/>	
		</copy>
		
		<copy todir="dist/" force="true">
			<fileset dir="deployables">
				<include name="**/*"/>
			</fileset>
		</copy>
		
		<chmod perm="755">
			<fileset dir="dist/example_scripts/">
				<include name="**/*"/>
			</fileset>
		</chmod>
		
		<delete dir="dist/util/"/>
		<mkdir dir="dist/util/"/>
		
		<java classname="ca.ubc.cs.beta.aeatk.ant.execscript.ExecScriptCreator" failonerror="true" classpathref="build.classpath" fork="true">
				<arg value="--class"/>
				<arg value="ca.ubc.cs.beta.aeatk.example.tae.TargetAlgorithmEvaluatorRunner"/>
				<arg value="--name"/>
				<arg value="algo-test"/>
				<arg value="--file-to-write"/>
				<arg value="dist/util"/>	
		</java>
		<java classname="ca.ubc.cs.beta.aeatk.ant.execscript.ExecScriptCreator" failonerror="true" classpathref="build.classpath" fork="true">
				<arg value="--class"/>
				<arg value="ca.ubc.cs.beta.aeatk.example.satisfiabilitychecker.SatisfiabilityChecker"/>
				<arg value="--name"/>
				<arg value="sat-check"/>
				<arg value="--file-to-write"/>
				<arg value="dist/util/"/>	
				<arg value="--default-mem"/>
				<arg value="1024"/>
		</java>
		
		<java classname="ca.ubc.cs.beta.aeatk.ant.execscript.ExecScriptCreator" failonerror="true" classpathref="build.classpath" fork="true">
					<arg value="--class"/>
					<arg value="ca.ubc.cs.beta.aeatk.example.verifyscenario.VerifyScenarioExecutor"/>
					<arg value="--name"/>
					<arg value="verify-scenario"/>
					<arg value="--file-to-write"/>
					<arg value="dist/util/"/>	
					<arg value="--default-mem"/>
					<arg value="1024"/>
		</java>
					
		
		<java classname="ca.ubc.cs.beta.aeatk.ant.execscript.ExecScriptCreator" failonerror="true" classpathref="build.classpath" fork="true">
				<arg value="--class"/>
				<arg value="ca.ubc.cs.beta.aeatk.targetalgorithmevaluator.base.ipc.reversetcpclient.IPCTAEClient"/>
				<arg value="--name"/>
				<arg value="ipc-client"/>
				<arg value="--file-to-write"/>
				<arg value="dist/util/"/>	
				<arg value="--default-mem"/>
				<arg value="1024"/>
		</java>
		
		<java classname="ca.ubc.cs.beta.aeatk.ant.execscript.ExecScriptCreator" failonerror="true" classpathref="build.classpath" fork="true">
			<arg value="--class" />
			<arg value="ca.ubc.cs.beta.aeatk.example.evaluator.TAEEvaluator" />
			<arg value="--name" />
			<arg value="tae-evaluator" />
			<arg value="--file-to-write" />
			<arg value="dist/util/" />
			<arg value="--default-mem"/>
			<arg value="1024"/>
		</java>
		
		
		<java classname="ca.ubc.cs.beta.aeatk.ant.execscript.ExecScriptCreator" failonerror="true" classpathref="build.classpath" fork="true">
			<arg value="--class" />
			<arg value="ca.ubc.cs.beta.aeatk.example.jsonexecutor.JSONExecutor" />
			<arg value="--name" />
			<arg value="json-executor" />
			<arg value="--file-to-write" />
			<arg value="dist/util/" />
			<arg value="--default-mem"/>
			<arg value="128"/>
		</java>
		
		
		<java classname="ca.ubc.cs.beta.aeatk.ant.execscript.ExecScriptCreator" failonerror="true" classpathref="build.classpath" fork="true">
				<arg value="--class" />
				<arg value="ca.ubc.cs.beta.aeatk.example.pcscheck.PCSCheckExecutor" />
				<arg value="--name" />
				<arg value="pcs-check" />
				<arg value="--file-to-write" />
				<arg value="dist/util/" />
				<arg value="--default-mem"/>
				<arg value="128"/>
		</java>
			
					
		
				
		
		
		<echo file="dist/git-hashes.txt" append="true">${ant.project.name} ${git.commit} ${git.dirty}${line.separator}</echo>
		<echo file="dist/git-hashes.tex" append="true">${ant.project.name} &amp; ${version.string} &amp; ${git.commit} &amp; ${git.dirty} \\${line.separator}\hline${line.separator}</echo>
		
	</target>
	
	<target name="zip" depends="archive" description="Makes tarball for this release">
			<fail message="Cannot deploy a build for the git master branch if it is dirty, please commit all changes">
				<condition>
					<and>
					<equals arg1="${git.branch}" arg2="master" casesensitive="false" trim="true"/>
					<equals arg1="${git.dirty}" arg2="1" casesensitive="false" trim="true"/>
					</and>
				</condition>
			</fail>
			<tar destFile="${software.dir}/${outputfilename}.tar.gz" longfile="gnu" compression="gzip">
				<tarfileset dir="dist/" filemode="755" dirmode="755" prefix="${outputfilename}/">
							<include name="**/*"/>
							<exclude name="${lastdeployfile}"/> 
				</tarfileset>
			</tar>
		</target>
		<target name="deploy-release" depends="zip" description="untars tarball in software.dir and creates symlink">
			<untar src="${software.dir}${file.separator}${outputfilename}.tar.gz" dest="${software.dir}" compression="gzip"/>
			<propertyfile file="${software.dir}${file.separator}${ant.project.name}-${git.branch}.latest" comment="Contains location of most recent ${ant.project.name}">
			<entry key="${ant.project.name}.location" value="${software.dir}${file.separator}${outputfilename}"/>
			</propertyfile>
			<echo>Untar Successful to ${software.dir}${file.separator}${outputfilename}</echo>
		</target>
		
		<target name="deploy" depends="zip, deploy-release"/>
	
</project>
