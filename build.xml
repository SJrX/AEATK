<?xml version="1.0"?>
<project name="ACLib" default="compile">
	<property name="private.buildfile" value="build-resources/private/user-antbuild.properties"/>
	<property file="${private.buildfile}"/>
	<property file="build-resources/antbuild.properties"/>
	
	<!-- If you don't specify a buildnumber file we will use this -->
	<property name="buildnumberpath" value="build/classes/"/>

	<property name="version.file" value="aclib-version.txt"/>
	<property name="version.file.dev" value="version/${version.file}"/>
	<fail message="No Software Directory specified, a private build file should exist in ${private.buildfile} this should specify at the very least 'software.dir'">
		<condition>
			<not>
					<isset property="software.dir"/>
			</not>
		</condition>
	</fail>
	
	<target name="git-status-init" description="Initialize Git variables">
	
					<exec executable="git" outputproperty="git.branch">
						<arg value="rev-parse"/>
						<arg value="--abbrev-ref"/>
						<arg value="HEAD"/>
					</exec>
					
					<exec executable="git" outputproperty="git.commit">
								<arg value="rev-parse"/>
								<arg value="HEAD"/>
					</exec>
		
					<exec executable="git" outputproperty="git.shortcommit">
										<arg value="rev-parse"/>
										<arg value="--short=12"/>
										<arg value="HEAD"/>
							</exec>
				
					<exec executable="git" resultproperty="git.dirty" output="/dev/null">
								<arg value="diff"/>
								<arg value="--exit-code"/>
					</exec>
					<echo>Git properties loaded, branch: ${git.branch}
commit: ${git.commit}
shortcommit: ${git.shortcommit}
dirty: ${git.dirty}</echo>
	</target>
	

	
	
	<target name="init" description="Creates build environment" depends="git-status-init"> 
		<mkdir dir="build/classes/"/>
		<mkdir dir="build/testclasses/"/>
		<mkdir dir="dist"/>
		<mkdir dir="models"/>
		<path id="compile.classpath">
						<fileset dir="lib" id="lib">
							<include name="*.jar"/>
							<exclude name="*sources.jar"/>
						</fileset>
						<fileset dir="${software.dir}/fastrf-${git.branch}/" id="fastrf">
							<include name="*"/>
						</fileset>
					</path>	
		<!--<path id="compile.classpath">
								<fileset dir="lib" id="lib">
									<include name="*.jar"/>
									<exclude name="*sources.jar"/>
								</fileset>
								<fileset dir="${software.dir}/fastrf-${git.branch}/" id="fastrf">
									<include name="*"/>
								</fileset>
		</path>-->	
	</target>
	
	<target name="clean" description="Cleans up build environment">
		<delete dir="build"/>
		<delete dir="dist"/>
		<delete dir="doc"/>
	</target>
	
	<target name="compile" depends="init" description="Compiles the source">
		<javac srcdir="src" destdir="build/classes" debug="true" includeantruntime="false" >
		<classpath refid="compile.classpath"/>
		</javac>		
	</target>	
	
	<target name="compile-test" depends="compile">
		<path id="test.compile.classpath">
	            <fileset dir="lib" id="lib">
	                <include name="*.jar"/>
	                <exclude name="*sources.jar"/>
	            </fileset>
	            <fileset dir="${software.dir}/fastrf-${git.branch}/" id="fastrf">
	                <include name="fastrf.jar"/>
	            </fileset>
                    <fileset dir="testlib">
                        <include name="*.jar"/>
                    </fileset>
	            <pathelement path="build/classes/"/>
	        </path>
				
	 	<javac srcdir="test" destdir="build/testclasses" debug="true" verbose="true" target="1.6">
					
	            <classpath refid="test.compile.classpath" />
			</javac>
	 </target>
	
	<target name="javadoc" depends="setjavaprop,doc, init" description="Make Javadoc"/>
	
	<target name="setjavaprop">
		<property name="build.javadoc" value="true"/>
	</target>
	
	
	
	<target name="doc" depends="javadoc-internal,nodoc"/>
			
			
	<target name="javadoc-internal"  if="build.javadoc">
		
		<path id="doc.classpath">
			
			<fileset dir="doclib" id="doclib">
				<include name="*.jar"/>
				<exclude name="*sources.jar"/>
			</fileset>
			<fileset dir="${software.dir}/fastrf-${git.branch}/" id="fastrf">
	                <include name="fastrf.jar"/>
				<include name="fastrf-src.jar"/>
	       </fileset>
			<path refid="compile.classpath"/>
		</path>	
		
		
		
		
		<javadoc sourcepath="src/" author="true" destdir="doc/" classpathref="doc.classpath" excludepackagenames="ca.ubc.cs.beta.hal.startup,ca.ubc.cs.beta.hal" />
			
	</target>
	<target name="nodoc" unless="build.javadoc">
		<echo>build.javadoc property not set so skipping building of javadoc</echo>
	</target>
	
	
	 <target name="test" depends="compile-test" description="Run JUnit Tests">
	       <path id="test.classpath">
	            <fileset dir="lib" id="lib">
	                <include name="*.jar"/>
	                <exclude name="*sources.jar"/>
	            </fileset>
	       		<fileset dir="testlib">
	       			<include name="*.jar"/>
	       		</fileset>
	            <fileset dir="${software.dir}/fastrf-${git.branch}/" id="fastrf">
	                <include name="fastrf.jar"/>
	            </fileset>
	            <pathelement path="build/classes/" /> 
	            <pathelement path="build/testclasses/" />
	            <pathelement path="test-files/" />
	        </path>
	 		
	        <junit fork="yes" printsummary="true" showoutput="false"> 
				<classpath refid="test.classpath"/>			
	 			<test name="ca.ubc.cs.beta.ACLibTestSuite"/>
	            <formatter type="plain" usefile="false" />
			</junit>
	</target>
		
	<target name="archive" depends="compile,doc" description="Creates JAR Archives">
		<buildnumber file="${buildnumberpath}/buildnumber-${ant.project.name}"/>
		<property name="version.string" value="v${version.major}.${version.minor}.${version.revision}${version.beta}-${git.branch}-${build.number}"/>
		<property name="version.devstring" value="v${version.major}.${version.minor}.${version.revision}dev-${git.branch}-${build.number}"/>
		<echo file="${version.file.dev}">${version.devstring} (${git.shortcommit})</echo>
		<echo file="build/classes/${version.file}">${version.string} (${git.shortcommit})</echo>
		
		
		<!--<jar destfile="dist/aclib-v${version.major}_${version.minor}_${build.number}.jar" basedir="build/classes"/>-->
		<jar destfile="dist/aclib.jar" basedir="build/classes"/>
		<jar destfile="dist/aclib-src.jar">
			<fileset dir="src/">
				 <include name="**/*.java"/>
			</fileset>
		</jar>
		<copy todir="dist/" force="true">
			<fileset refid="lib"/>
			<fileset refid="fastrf"/>	
		</copy>
		
		<echo file="dist/git-hashes.txt" append="true">${ant.project.name} ${git.commit} ${git.dirty}${line.separator}</echo>
		<echo file="dist/git-hashes.tex" append="true">${ant.project.name} &amp; ${version.string} &amp; ${git.commit} &amp; ${git.dirty} \\${line.separator}\hline${line.separator}</echo>
		
	</target>
	
	<target name="deploy" depends="archive" description="Deploy JAR Archives to deploy dir">
		

		<fail message="Cannot deploy a build for the git master branch if it is dirty, please commit all changes">
			<condition>
				<and>
				<equals arg1="${git.branch}" arg2="master" casesensitive="false" trim="true"/>
				<equals arg1="${git.dirty}" arg2="1" casesensitive="false" trim="true"/>
				</and>
			</condition>
		</fail>
		
		<delete dir="${deploy.dir}-${git.branch}"/>
		<mkdir dir="${deploy.dir}-${git.branch}"/>
		<chmod perm="666">
						<fileset dir="${deploy.dir}-${git.branch}">
								<include name="*"/>
						</fileset>
				</chmod>
		
		<copy todir="${deploy.dir}-${git.branch}" force="true">
			<fileset dir="dist/">
				<include name="*"/>
			</fileset>
		</copy>
		<chmod perm="444">
				<fileset dir="${deploy.dir}-${git.branch}">
						<include name="*"/>
				</fileset>
		</chmod>
		<chmod perm="555">
				<fileset dir="${deploy.dir}-${git.branch}">
						<include name="*.sh"/>
				</fileset>
		</chmod>
		
		<echo>Deployed version ${version.string} to ${deploy.dir}-${git.branch}</echo>
	</target>
</project>
